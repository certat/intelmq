# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import sys
from io import StringIO

if sys.version_info[0] == 2:
    import unicodecsv as csv
else:
    import csv

try:
    from urlparse import urlparse
except ImportError:
    from urllib.parse import urlparse

from intelmq.lib import utils
from intelmq.lib.bot import Bot
from intelmq.lib.exceptions import InvalidValue
from intelmq.lib.message import Event


class MalwareDomainListParserBot(Bot):

    def process(self):
        report = self.receive_message()

        if not report or not report.contains("raw"):
            self.acknowledge_message()
            return

        raw_report = utils.base64_decode(report.value("raw"))
        for row in csv.reader(StringIO(raw_report)):
            event = Event(report)

            event.add("time.source", row[0].replace('_', ' ')+" UTC",
                      sanitize=True)
            if row[1] != '-':
                event.add("source.url", row[1], sanitize=True)
            try:
                event.add("source.ip", row[2], sanitize=True)
            except InvalidValue:
                event.add("source.url", row[2], sanitize=True)
                event.add('source.ip', urlparse(row[2]).netloc,
                          sanitize=True)
            event.add("source.reverse_dns", row[3], sanitize=True)
            event.add("event_description.text", row[4], sanitize=True)
            # TODO: ignore abuse contact for now
            event.add("source.asn", int(row[6]))

            event.add('classification.type', u'malware')
            event.add("raw", ",".join(row), sanitize=True)

            self.send_message(event)
        self.acknowledge_message()


if __name__ == "__main__":
    bot = MalwareDomainListParserBot(sys.argv[1])
    bot.start()
